<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css"
          integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ"
          crossorigin="anonymous">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
          integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
          crossorigin="anonymous">
    <title>Cosmos DB Change Feed</title>
    <style>
        .fade-enter-active {
            transition: all 1.5s ease;
        }

        .fade-enter, .fade-leave-to {
            opacity: 0;
        }
    </style>
</head>
<body>
    <div class="container" id="app">
        <div class="row" style="margin-bottom: 40px; height:90%;overflow:auto;">
            <table cellpadding="5">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Firstname</th>
                        <th>Lastname</th>
                        <th>Discount</th>
                        <th>Total Price</th>
                        <th>Order Date</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="order in orders">
                        <td>{{order.id | last4Chars}}</td>
                        <td>{{order.firstname}}</td>
                        <td>{{order.lastname}}</td>
                        <td>{{order.discount | toPercent}}</td>
                        <td>{{order.totalPrice | toCurrency}}</td>
                        <td>{{order.orderDate | formatDate}}</td>
                    </tr>
                </tbody>
            </table>
            @*<div v-for="order in orders" class="col-md-6 col-lg-4 col-xl-3" style="margin: 16px 0px;">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">{{ order.id }} <i class="fas fa-plane"></i> {{ order.orderDate }}</h4>
                        <transition name="fade" mode="out-in">
                            <h4 class="card-subtitle mb-2" :key="order.totalPrice">${{ order.totalPrice }}</h4>
                        </transition>
                    </div>
                </div>
            </div>*@
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js">

    </script>
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="~/lib/moment.js/moment.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script>
        const apiBaseUrl = 'https://onlinetoystoredemofunctions.azurewebsites.net'
        const axiosConfig = {}
        const data = {
            orders: []
        }

        Vue.filter("last4Chars", str => str.substring(str.length - 4))

        Vue.filter('formatDate', function (value) {
            if (value) {
                return moment(String(value)).format('MM/DD/YYYY hh:mm:ss')
            }
        })

        Vue.filter('toCurrency', function (value) {
            if (typeof value !== "number") {
                return value;
            }
            var formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2
            });
            return formatter.format(value);
        })

        Vue.filter('toPercent', function (value) {
            if (typeof value !== "number") {
                return value;
            }
            var formatter = new Intl.NumberFormat('en-US', {
                style: 'percent',
                minimumFractionDigits: 0,
                maximumFractionDigits: 2
            });
            return formatter.format(value);
        })

        Vue.filter('capitalize', function (value) {
            if (!value) return ''
            value = value.toString()
            return value.charAt(0).toUpperCase() + value.slice(1)
        })

        const app = new Vue({
            el: '#app',
            data: data
        })
        getOrders().then(function (orders) {
            orders.forEach(orderUpdated)
        }).then(getConnectionInfo).then(function (info) {
            let accessToken = info.accessToken
            const options = {
                accessTokenFactory: function () {
                    if (accessToken) {
                        const _accessToken = accessToken
                        accessToken = null
                        return _accessToken
                    } else {
                        return getConnectionInfo().then(function (info) {
                            return info.accessToken
                        })
                    }
                }
            }

            const connection = new signalR.HubConnectionBuilder()
                .withUrl(info.url, options)
                .build()

            connection.on('orderUpdated', orderUpdated)

            connection.onclose(function () {
                console.log('disconnected')
                setTimeout(function () { startConnection(connection) }, 2000)
            })
            startConnection(connection)

        }).catch(console.error)

        function startConnection(connection) {
            console.log('connecting...')
            connection.start()
                .then(function () { console.log('connected!') })
                .catch(function (err) {
                    console.error(err)
                    setTimeout(function () { startConnection(connection) }, 2000)
                })
        }

        function getOrders() {
            return axios.post(`${apiBaseUrl}/api/GetOrders`, null, axiosConfig)
                .then(function (resp) { return resp.data })
                .catch(function () { return {} })
        }

        function getConnectionInfo() {
            return axios.post(`${apiBaseUrl}/api/SignalRInfo`, null, axiosConfig)
                .then(function (resp) { return resp.data })
                .catch(function () { return {} })
        }

        function orderUpdated(updatedOrder) {
            const order = data.orders.find(o => o.id === updatedOrder.id)
            if (order) {
                Vue.set(order, 'id', order.id)
                Vue.set(order, 'orderDate', order.orderDate)
                Vue.set(order, 'totalPrice', order.TotalPrice)
            } else {
                data.orders.push(updatedOrder)
            }
        }
    </script>
</body>
</html>
